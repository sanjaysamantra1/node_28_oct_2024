Serving static files in Express
===============================
-To serve static files such as images, CSS files, and JavaScript files, use the express.static() built-in middleware function in Express. 
express.static(root<directory Name>, [options])
-The root argument specifies the root directory from which to serve static assets.
 app.use(express.static('public'))
-To use multiple static assets directories, call the express.static() middleware function multiple times:
	app.use(express.static('public'))
	app.use(express.static('files'))
	
	

Body-parser
===========
-parse the body of requests which have payloads attached to them.
-Parse incoming request bodies(formData) in a middleware before handlers are invoked.
-extracts the body portion of an incoming request & exposes it on req.body.
-parses the data submitted using HTTP POST request.
 npm install body-parser --save
 
 // parse application/x-www-form-urlencoded
 app.use(bodyParser.urlencoded({ extended: false }))

 // parse application/json
 app.use(bodyParser.json())
 
 
Note: ExpressJS provides its inbuilt functions for parsing request body
	app.use(express.json()); 
	app.use(express.urlencoded()); 
 


cookie-parser
=============
-To Read cookie information from client.
-It parses Cookie header and populate req.cookies with an object keyed by cookie names. 

1. How to Read Client cookie data in Server:
	const cookieParser = require('cookie-parser');
	app.use(cookieParser());
	
	app.get('/getCookie', (req, res,next) => {
		res.send(req.cookies); // server can read cookie data from request object
	});
2. How server can set cookie in client's browser
   app.get('/setCookie', (req, res,next) => {
		res.cookie('name','sanjay')
		res.cookie('add','bangalore')
    });
3. How server can delete cookie from client's browser
   app.get('/setCookie', (req, res,next) => {
		res.clearCookie('name');
    });


NodeJs and Typescript
=====================
1. npm init -y
2. npm install express typescript ts-node @types/node @types/express
3. npx tsc --init  (OR) tsc --init  (Generates tsconfig.json)
4. add CRUD code
5. npx ts-node src/app.ts
		(OR)
   a. npx tsc  (compiles the Typescript files and generates JavaScript files)
   b. node dist/app.js


tsconfig.json
-------------
{
  "compilerOptions": {
    "lib": [
      "es6"
    ],
    "target": "es6",
    "module": "commonjs",
    "moduleResolution": "node",
    "outDir": "dist",
    "resolveJsonModule": true,
    "emitDecoratorMetadata": true,
    "esModuleInterop": true,
    "experimentalDecorators": true,
    "sourceMap": true
  },
  "include": [
    "src/**/*.ts"
  ],
  "exclude": [
    "node_modules",
    "**/*.spec.ts"
  ]
}
