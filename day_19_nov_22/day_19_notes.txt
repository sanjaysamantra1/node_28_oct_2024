NPM Global vs Local Installation
================================
-By default, NPM installs any dependency in the local mode. 
-Local mode refers to the package installation in node_modules directory of our project.
-Locally installed packages are accessible via require() method. 
 ex: npm i minimist
    const minimist = require('minimist');
-Run the below command command to list down all the locally installed modules. 
 npm ls
-few packages that should be locally installed:
 1.minimist  2.express  3.lodash  4.bootstrap  5.axios  6.rxjs
-If a module needs to be used inside our code using require(), then install that module locally.
 
 
-Globally installed packages/dependencies are stored in system directory. 
-Such dependencies can be used in CLI (Command Line Interface), they are not meant to be imported using require() in Node application directly. 
 ex:- npm i nodemon -g
      const nodemon = require('nodemon'); //No
-Few packages that should be globally installed: 
 1.npm   2.nodemon  3.typescript  4.create-react-app  5.angular-cli  6.json-server
-Run the below command command to list down all the globally installed modules. 
 npm ls -g
-If we want to use a module in shell/command-prompt not using require(), install that globally.
 




yarn package Manager
====================
-Yarn is an open-source package manager used to manage dependencies in JavaScript projects. 
-It assists with the process of installing, updating, configuring, and removing packages dependencies

npm install -g yarn

yarn --version
yarn --help

yarn init  (OR) yarn init -y
yarn add minimist




 
Package.json
============
-Contains the metadata of the project.
-Helps NPM to understand how the project should be handled along with its dependencies.
-package.json files contain the below information.
	  project name,
	  version,
	  homepage,
	  description,
	  author,
	  keywords 
	  scripts 
	  dependencies 
	  devdependencies
	  optionaldependencies etc.
-package.json file is normally located at the root directory of a Node.js project.


package.json  VS  package-lock.json
===================================
-package.json maintains only the main packages's information.
 "cors": "^2.8.5"
 "bootstrap" : "^5.2.1"
-package-lock.json containes the exact version. 
	"bootstrap" : "5.3.2" (npm update bootstrap)
-package-lock.json maintains main packages's information + nested-packages information
    "node_modules/cors": {  
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      }
-package.json lists the required dependencies and their version ranges, but not the exact versions to be installed.
-package-lock.json is used to ensure that the same dependencies are installed across different environments and prevent conflicts due to different versions being installed.

-package.json is created and modified manually by the developer.
-It is automatically generated by npm and updated whenever you install or update packages.

-in package.json (~) tells go up to hot-fixes 1.4.X if 1.4.1 is installed
 in package.json (^) checks if there is a newer version under 1.x.x if 1.4.1 is installed
 in package-lock.json - there is neither ~ nor ^




NPX
===
NPX : Node Package Executer (used to execute Node.js packages)
-executes Node.js commands without installing them.
-When you install NPM version 5.2.0 or higher, get NPX installed
-we can install npx using the below command
 npm i -g npx
-npx helps us avoid versioning, dependency issues and installing unnecessary packages that we just want to try out.
-provides a clear and easy way of executing packages, commands, modules and even GitHub gists and repositories.
-ex:npx create-react-app my-sample-react-app
    npx nodemon file1.js



Nodemon
=======
-Nodemon is a utility that will monitor for any changes in your source and automatically restart your server.
-Nodemon can be installed using NPM.
 ex:- npm i -g nodemon
-Nodemon can be used without installing also, using npx
 npx nodemon file1.js
-nodemon help
 nodemon -h 
 nodemon --help
-Just use nodemon instead of node to run your code, your process will automatically restart when your code changes
 ex:- node file1.js      (server won't be re-started when code is changed)
      nodemon file1.js   (server gets re-started when there is a code change)
	  npx nodemon file1.js   (server gets re-started when there is a code change)
-The 'node_modules' folder is ignored by default by nodemon.
-You can restart the process at any time by typing 'rs' and hitting enter.