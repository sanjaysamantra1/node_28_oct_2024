How to install Node.js
======================
-Official packages for all the major platforms are available in the below URL
 https://nodejs.org/en/download/prebuilt-installer
 https://nodejs.org/en/about/previous-releases
 
 
 
 
How to Maintain multiple NodeJS versions
========================================
-NVM : Node version Manager
-NVM is a version manager for node.js
-Multiple nodeJS versions can be maintained with the help of NVM.
-It allows to easily switch the Node.js version.
  NVM for Mac - https://tecadmin.net/install-nvm-macos-with-homebrew/
  NVM for windows - https://github.com/coreybutler/nvm-windows
                    https://github.com/coreybutler/nvm-windows/releases


NVM useful commands
===================
-Check NVM is installed
 nvm --version
-List all the available Node Versions to be installed
 nvm list available
-List all the installed Node Versions
 nvm list installed / nvm ls
-To install latest node version
 nvm install node
-To install a particular version of node
 nvm install 16.0.0
-To uninstall a particular version of node
 nvm uninstall 16.0.0
-To switch node version
 nvm use 16.0.0
-To check currently used node version
 nvm current / node -v
 
 


REPL
====
-REPL stands for Read-Eval-Print-Loop.
 R - Reads user's input
 E - Evaluates the expression
 P - Prints the result
 L - Loops the above things until user kills the process
-Node.js comes with virtual environment called REPL.
-it is similar to Shell in Linux or command prompt in windows where 
 a command is entered and the system responds with an output in an interactive mode
-It is a quick and easy way to test simple Node.js/JavaScript code.
-To launch the REPL (Node shell), open command prompt and type 'node'.
-If you need to write multi line JavaScript expression or function then just press Enter.
 (The REPL terminal will display three dots (...), it means you can continue on next line)
-We can execute an external JavaScript file by writing 'node <Filename>'.
-assign the result of the most recently evaluated expression to the special variable _ (underscore)
	 a = 10; b = 20; a+b;
	 sum = _; console.log(sum);
-To Open REPL in editor mode , use .editor
-To Exit REPL type .exit
-if you press the tab key the REPL will try to autocomplete what you wrote to match a variable you already defined or a predefined one.
-Used For Exploring node objects ( os, fs , http)
 fs (enter)



REPL Command		Description
--------------------------------
.help				Display help on all the commands
.editor			    enables editor mode, multiline JS code , ctrl+D  
Tab Key				Display the list of all commands. (Math. tab twice)
Up/Down Keys		See previous commands applied in REPL.
.save filename		Save current Node REPL session to a file. (.save e:/abc.txt)
.load filename		Load the specified file in the current Node REPL session.
.exit				exits the repl (same as pressing ctrl+C two times)
ctrl + c			Terminate the current command.
ctrl + c (twice)	Exit from the REPL.
ctrl + d			Exit from the REPL.



How to exit from a Node.js shell
================================
There are various ways to terminate a Node.js application.
-Press Ctrl + C twice.
-Press Ctrl + D once.
-type .exit and press Enter
-process.exit()
-process.kill(process.pid)




How to run a javascript/NodeJs file 
===================================
node <fileName>.js
node --watch <fileName>.js

accept arguments from the command line
======================================
-we can pass any number of arguments while invoking a Node.js application.
-Arguments can be standalone or have a key-value.
 ex: node app.js sanjay
     node app.js name=sanjay
-arguments can be collected by using 'process' module's argv property which is an array.
-The first element is the full path of the node command.
-The second element is the full path of the file being executed.
-All the additional arguments are present from the third position going forward.
-we can iterate over all the arguments (including the node path and the file path) using a loop:
	process.argv.forEach((val, ind) => {
	  console.log(`index ${ind} argument -> ${val}`);
	})
-we can get only the additional arguments by creating a new array that excludes the first 2 params
 const args = process.argv.slice(2)


Assignment:
-Ask user to enter 2 numbers and 1 operator(+ - * /) 
-perform arithmetic operation on those 2 numbers
Note: Handle edge cases also (user should pass arguments, if not show error message)



Minimist
========
-The best way to deal with key:value arguements is by using the 'minimist' library.
 const minimist = require('minimist');
 const argArr = process.argv.slice(2);
 const argObj = minimist(argArr);
 console.log(argObj)
-use double dashes before each argument name
 node app.js --name=sanjay --add=bangalore
 Note: process module does not need a "require", it's defaultly available.